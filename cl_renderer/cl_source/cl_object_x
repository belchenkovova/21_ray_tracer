// cl_object_x /////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_control.h"
#include "rt_parameters.h"

static int			object_intersect(constant t_object *object, t_intersection *intersection)
{
#ifdef RT_DEBUG_CL_RT
	if (object->type == object_sphere)
		return (sphere_intersect(object, intersection));
	else if (object->type == object_plane)
		return (plane_intersect(object, intersection));
	/*
	else if (object->type == object_cone)
		return (cone_intersect(object, intersection));
	else if (object->type == object_cylinder)
		return (cylinder_intersect(object, intersection));
	else if (object->type == object_paraboloid)
		return (paraboloid_intersect(object, intersection));
	else if (object->type == object_moebius)
		return (moebius_intersect(object, intersection));
	*/
#endif
	return (0);
}

static RT_F			object_sdf(constant t_object *object, RT_F4 point)
{
#ifdef RT_DEBUG_CL_RM
	if (object->type == object_sphere)
		return (sdf_sphere(object, point));
	else if (object->type == object_plane)
		return (sdf_plane(object, point));
	else if (object->type == object_julia)
		return (sdf_julia(object, point));
	else if (object->type == object_torus)
		return (sdf_torus(object, point));
	else if (object->type == object_box)
		return (sdf_box(object, point));
#endif
	return (RT_INFINITY);
}