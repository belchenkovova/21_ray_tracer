// cl_rm_csg ///////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct 		        s_object_csg
{
    int     		        id_positive;
    int     		        id_negative;
}					        t_object_csg;

static	RT_F		        csg_sdf_difference(const RT_F distance_a, const RT_F distance_b)
{
	return (RT_MAX(distance_a, -distance_b));
}

static RT_F			        sdf_csg_compute(constant t_object *object, RT_F4 point)
{
	if (object->type == object_sphere)
		return (sphere_sdf(object, point));
	else if (object->type == object_box)
        return (box_sdf(object, point));
    return (INFINITY);
}

static RT_F 		        csg_sdf(constant t_object *object, RT_F4 point)
{
	constant t_object_csg	*data;
	constant t_object       *scene_begin;
	RT_F					sdf[2];

    data = (constant t_object_csg *)object->data;
    if (object->id < 2)
        return (INFINITY);
    scene_begin = object - object->id;
    sdf[0] = sdf_csg_compute(scene_begin + data->id_positive, point);
    sdf[1] = sdf_csg_compute(scene_begin + data->id_negative, point);

    return (csg_sdf_difference(sdf[0], sdf[1]));
}

// todo: decide where is better to check csg validation