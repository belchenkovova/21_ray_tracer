// cl_radiance /////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_parameters.h"

// todo : normal changing (reflectance) && refractive (maybe problem in plane)

static void			radiance_add(
					constant t_scene *scene,
					t_intersection *intersection,
					global RT_F4 *sample,
					constant t_cl_renderer_settings *settings,
					global ulong *rng_state,
					int global_id)
{
	RT_F4			radiance;
	RT_F4			explicit;
	RT_F4			mask;
	RT_F			cosine;
	RT_F			choice;

	radiance = (RT_F4){0.f, 0.f, 0.f, 0.f};
	mask = (RT_F4){1.f, 1.f, 1.f, 1.f};
	for (int depth = 0; depth < settings->sample_depth; depth++)
	{

		if (!scene_intersect(scene, intersection, settings))
		{

			if (global_id == 8){printf("no: \n");
			printf("origin %f %f %f\n", intersection->ray.origin.x, intersection->ray.origin.y, intersection->ray.origin.z);
			printf("hit %f %f %f\n", intersection->hit.x, intersection->hit.y, intersection->hit.z);
			printf("%d\n", intersection->object_id);}
			radiance += mask * (RT_F4){0.15f, 0.15f, 0.15f, 0.15f};
			break;
		}

		if (global_id == 8){printf("yes: \n");
		printf("origin %f %f %f\n", intersection->ray.origin.x, intersection->ray.origin.y, intersection->ray.origin.z);
		printf("hit %f %f %f\n", intersection->hit.x, intersection->hit.y, intersection->hit.z);
		printf("%d\n", intersection->object_id);}
		if (depth > settings->russian_depth && f4_max_component(intersection->material.color) < rng(rng_state))
			break ;

		if (intersection->material.reflection || intersection->material.refraction)
		{
			choice = rng(rng_state);
			if (choice < intersection->material.reflection)
				intersection_reflect(intersection, intersection);
			else
				intersection_refract(intersection, intersection);
			mask = mask / (choice < intersection->material.reflection ? 1 : intersection->material.refraction);
		}
		else
		{
			radiance += mask * intersection->material.emission;
			if (settings->light_explicit)
			{
				explicit = radiance_explicit(scene, intersection, settings, rng_state);
				radiance += explicit * mask * intersection->material.color;
			}

			intersection->ray.origin = intersection->hit + intersection->normal * RT_EPSILON;

#ifdef RT_CL_UNIFORM
			intersection->ray.direction = sample_uniform(&intersection->normal, &cosine, rng_state);
			mask *= intersection->material.color * cosine;
#endif

#ifdef RT_CL_COSINE
			intersection->ray.direction = sample_cosine(&intersection->normal, rng_state);
			mask *= intersection->material.color;
#endif
		}
	}

	if (settings->sample_count == 1)
		*sample = radiance;
	else
		*sample += radiance;
}

static RT_F4		radiance_get(
					global RT_F4 *sample,
					constant t_cl_renderer_settings *settings)
{
	return (*sample / settings->sample_count);
}