// cl_main /////////////////////////////////////////////////////////////////////////////////////////////////////////////

# include "rt_parameters.h"

kernel void			cl_main(
					global t_camera *camera,
					global t_scene *scene,
					global t_color *image,
					global RT_F4 *sample_store,
					constant t_cl_renderer_settings *settings,
					global ulong *rng_state)
{
	int				global_id;
	int2			screen;
	t_intersection	intersection;
	int				filter_stereo;
	RT_F4			radiance;
	global RT_F4	*sample_store_mapped[RT_CL_SAMPLE_ARRAY_LENGTH];

	filter_stereo = camera->filter_stereo;
	sample_store_map(sample_store, sample_store_mapped, camera);

    global_id = get_global_id(0);

	if (camera->select_request)
	{
		if (!global_id)
			camera_select(camera, scene, settings);
		return ;
	}

	if (camera->focus_request)
	{
		if (!global_id)
			camera_auto_focus(camera, scene, settings);
		return ;
	}

	screen.x = global_id % camera->width;
	screen.y = global_id / camera->width;

	intersection.ray = camera_build_ray(camera, &screen, rng_state);

	radiance = radiance_trace(scene, camera, &intersection, settings, rng_state);
	radiance_write(sample_store_mapped, global_id, radiance, settings, &filter_stereo);
	if (filter_stereo)
	{
		t_intersection	intersection_stereo;

		intersection_stereo.ray = camera_build_ray(camera, &screen, rng_state);
		intersection_stereo.ray.origin.x += 1;
        radiance = radiance_trace(scene, camera, &intersection_stereo, settings, rng_state);
        radiance_write(sample_store_mapped, global_id, radiance, settings, &filter_stereo);
        image[global_id] = color_unpack(radiance_read(sample_store_mapped, global_id, settings), 0);
	}
	else
		image[global_id] = color_unpack(radiance_read(sample_store_mapped, global_id, settings), camera->filter_sepia);
}
