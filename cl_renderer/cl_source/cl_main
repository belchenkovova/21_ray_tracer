// cl_main /////////////////////////////////////////////////////////////////////////////////////////////////////////////

# include "rt_parameters.h"

kernel void			cl_main(
					global t_camera *camera,
					global t_scene *scene,
					global t_color *image,
					global RT_F4 *sample_store,
					constant t_rt_settings *settings,
					global ulong *rng_state)
{
	int				global_id;
	int2			screen;
	global RT_F4	*sample_store_mapped[RT_SAMPLE_ARRAY_LENGTH];

	t_intersection	intersection;
	RT_F4			radiance;

	t_intersection	stereo_intersection;
	RT_F4			stereo_radiance[2];

    global_id = get_global_id(0);
	sample_store_map(sample_store, sample_store_mapped, camera);

	if (camera->select_request)
	{
		if (!global_id)
			camera_select(camera, scene, settings);
		return ;
	}

	if (camera->focus_request)
	{
		if (!global_id)
			camera_auto_focus(camera, scene, settings);
		return ;
	}

	screen.x = global_id % camera->width;
	screen.y = global_id / camera->width;

	intersection.ray = camera_build_ray(camera, &screen, rng_state);

	radiance = radiance_trace(scene, camera, &intersection, settings, rng_state);

	if (camera->filter_mod == rt_filter_stereo)
	{
		stereo_intersection.ray = camera_build_ray(camera, &screen, rng_state);
		stereo_intersection.ray.origin.x += 1;
		stereo_radiance[0] = filter_stereo(radiance, cl_stereo_type_a);
        stereo_radiance[1] = radiance_trace(scene, camera, &stereo_intersection, settings, rng_state);
        stereo_radiance[1] = filter_stereo(stereo_radiance[1], cl_stereo_type_b);
        radiance = stereo_radiance[0] + stereo_radiance[1];
	}

	radiance_write(sample_store_mapped, global_id, radiance, settings);
	image[global_id] = color_unpack(radiance_read(sample_store_mapped, global_id, settings), camera->filter_mod == rt_filter_sepia);
}
