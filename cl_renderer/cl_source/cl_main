// cl_main /////////////////////////////////////////////////////////////////////////////////////////////////////////////

kernel void			cl_main(
					global t_camera *camera,
					global t_scene *scene,
					global t_color *image,
					global RT_F4 *sample_store,
					constant t_cl_renderer_settings *settings,
					global ulong *rng_state,
					global t_texture *texture)
{
	int				global_id;
	int2			screen;
	t_intersection	intersection;
	RT_F4           illumination_effect;

    global_id = get_global_id(0);

	screen.x = global_id % camera->width;
	screen.y = global_id / camera->width;

	scene->textures[0] = &texture->data[0];
	scene->texture_length = &texture->texture_length[0];
	for (int texture_iter = 1; texture_iter < texture->textures_number; texture_iter++)
	{
		scene->textures[texture_iter] = scene->textures[texture_iter - 1]
			+ texture->texture_length[texture_iter - 1];
	}

	intersection.ray = camera_build_ray(camera, &screen, rng_state);

	if (!global_id && camera->focus_request)
		camera_auto_focus(camera, scene, settings);

	if (settings->illumination)
		illumination_effect = illumination(scene, camera, &intersection, settings);
	else
		illumination_effect = 0.;

    radiance_add(scene, camera, &intersection, sample_store + global_id, settings, rng_state);

	image[global_id] = color_unpack(illumination_effect + radiance_get(sample_store + global_id, settings), camera->filter_sepia, 255);
}
