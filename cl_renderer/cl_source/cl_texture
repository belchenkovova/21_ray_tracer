// cl_texture //////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct 		s_texture
{
	char 			name[RT_TEXTURE_MAX_NUMBER][RT_NAME_SIZE];
	RT_F4			data[RT_TEXTURE_DATA_SIZE];
	int 			texture_length[RT_TEXTURE_MAX_NUMBER];
	int				width[RT_TEXTURE_MAX_NUMBER];
	int				height[RT_TEXTURE_MAX_NUMBER];
	int 			textures_number;
}					t_texture;

static RT_F4        get_color_from_texture(
                    global t_texture *texture,
                    int texture_id,
                    RT_F *u, RT_F *v)
{
    global RT_F4    *pointer;
    int             x;
    int             y;

    pointer = &texture->data[0];
    for (int i = 0; i < texture_id; i++)
        pointer += texture->texture_length[i];
    x = floor(*u * (RT_F)texture->width[texture_id]);
    y = floor((1 - *v) * (texture->height[texture_id] - 0.001));

    if (x < 0) x = 0;
    if (y < 0) y = 0;

    if (x > (texture->width[texture_id] - 1))
    	x = texture->width[texture_id] - 1;
    if (y > (texture->height[texture_id] - 1))
        	y = texture->height[texture_id] - 1;
    return (pointer[y * texture->width[texture_id] + x]);
}

static void         cylinder_texture(
					global t_camera *camera,
                    global t_texture *texture,
                    global t_object *object,
                    t_intersection *intersection,
                    RT_F *u, RT_F *v)
{
    t_object_cylinder data;
    RT_F4           normal;

    data = *(global t_object_cylinder* )object->data;
    normal = normalize(intersection->hit - data.top);

    *u = 0.5 + atan2(normal.z, normal.x) / (2 * _RT_PI);

    if (dot(normalize(data.bottom - intersection->hit), data.axis) >= -RT_EPSILON
    	&& dot(normalize(data.bottom - intersection->hit), data.axis) <= RT_EPSILON)
        *v = length(intersection->hit - data.bottom) / data.length;
    else if (dot(normalize(data.top - intersection->hit), data.axis) >= -RT_EPSILON
    	&& dot(normalize(data.top - intersection->hit), data.axis) <= RT_EPSILON)
        *v = 1 - length(intersection->hit - data.top) / data.length;
    else
    {
        intersection->hit.x = data.top.x;
        intersection->hit.z = data.top.z;
        *v = 1 - (data.radius + length(intersection->hit - data.top)) / data.length;
    }
}

static void         cone_texture(
                    global t_camera *camera,
                    global t_texture *texture,
                    global t_object *object,
                    t_intersection *intersection,
                    RT_F *u, RT_F *v)
{
    t_object_cone   data;
    RT_F4           normal;
    RT_F4			shift;
    RT_F4			hit_top;
    RT_F			cosine;
    RT_F			hypotenuse;
    RT_F			cathet_b;

    data = *(global t_object_cone* )object->data;
	shift = data.bottom - 0;
	data.bottom += -1 * shift;
	data.top += -1 * shift;
	intersection->hit += -1 * shift;

	hit_top = intersection->hit - data.top;
    hypotenuse = length(hit_top);
    cosine = dot(data.axis, normalize(hit_top));
    cathet_b = cosine * hypotenuse;
	normal = normalize(intersection->hit - (data.top + data.axis * cathet_b));

    if ((data.top - data.bottom).y == 0)
        *u = 0.5 + atan2(normal.y, normal.z) / (2 * RT_PI);
    else
        *u = 0.5 + atan2(normal.z, normal.x) / (2 * RT_PI);

    if (!(dot(normalize(data.bottom - intersection->hit), data.axis) >= -RT_EPSILON
        && dot(normalize(data.bottom - intersection->hit), data.axis) <= RT_EPSILON))
        *v = 1 - length(intersection->hit - data.top) / data.length;
    else
        *v = length(intersection->hit - data.bottom) / data.length;
}

static void         sphere_texture(
					global t_camera *camera,
                    global t_texture *texture,
                    global t_object *object,
                    t_intersection *intersection,
                    RT_F *u, RT_F *v)
{
    t_object_sphere data;
    RT_F4           normal;

    data = *(global t_object_sphere* )object->data;
    normal = normalize(intersection->hit - data.position);

    *u = 0.5 + atan2(normal.z, normal.x) / (2 * _RT_PI);
    *v = 0.5 + asin(normal.y) / _RT_PI;
}

static void         plane_texture(
                    global t_texture *texture,
                    global t_object *object,
                    t_intersection *intersection,
                    RT_F *u, RT_F *v)
{
    t_object_plane   data;
    RT_F4            vector;

    data = *(global t_object_plane* )object->data;
    vector = intersection->hit - data.position;

    vector = RT_ABS(vector);
    *u = RT_MOD((vector.x + vector.z), texture->width[object->texture_id]);
    *u = 1 - *u / texture->width[object->texture_id];
    *v = RT_MOD((vector.y + vector.z), texture->height[object->texture_id]);
    *v = 1 - *v / texture->height[object->texture_id];
}

static RT_F4		object_texture(
					global t_texture *texture,
					global t_camera *camera,
					global t_object *object,
					t_intersection *intersection)
{
	RT_F            u;
    RT_F            v;

	if (object->type == object_type_sphere)
            sphere_texture(camera, texture, object, intersection, &u, &v);
	else if (object->type == object_type_cone)
		cone_texture(camera, texture, object, intersection, &u, &v);
	else if (object->type == object_type_cylinder)
		cylinder_texture(camera, texture, object, intersection, &u, &v);
	else if (object->type == object_type_plane)
		plane_texture(texture, object, intersection, &u, &v);
	return (get_color_from_texture(texture, object->texture_id, &u, &v));
}