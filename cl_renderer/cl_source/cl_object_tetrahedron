// cl_object_tetrahedron ///////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_parameters.h"

typedef struct				s_object_tetrahedron
{
	RT_F4					position;
	int						iterations;
	RT_F					scale;
}							t_object_tetrahedron;

static RT_F					sdf_tetrahedron(constant t_object *object, RT_F4 point)
{
	t_object_tetrahedron	data;
	RT_F4					vertex[4];
	RT_F4					c;
	RT_F					distance[2];

	data = *(constant t_object_tetrahedron *)object->data;
	point = data.position - point;
	vertex[0] = (RT_F4){1., 1., 1., 0.};
	vertex[1] = (RT_F4){-1., -1., 1., 0.};
	vertex[2] = (RT_F4){1., -1., -1., 0.};
	vertex[3] = (RT_F4){-1., 1., -1., 0.};

	for (int iter = 0; iter < data.iterations; iter++)
	{
		c = vertex[0];
        distance[0] = length(point - vertex[0]);

        distance[1] = length(point - vertex[1]);
        if (distance[1] < distance[0])
        {
        	c = vertex[1];
        	distance[0] = distance[1];
        }

        distance[1] = length(point - vertex[2]);
        if (distance[1] < distance[0])
        {
        	c = vertex[2];
        	distance[0] = distance[1];
        }

        distance[1] = length(point - vertex[3]);
        if (distance[1] < distance[0])
        {
        	c = vertex[3];
        	distance[0] = distance[1];
        }

        point *= data.scale;
        point -= c * (RT_F)(data.scale - 1.);
	}
	return (length(point) * pow(data.scale, (RT_F)(data.iterations)));
}
