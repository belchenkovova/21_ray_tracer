// cl_scene_x //////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_parameters.h"

typedef struct		s_scene
{
	t_object		objects[RT_CL_SCENE_CAPACITY];
	int				objects_length;
	int				lights[RT_CL_SCENE_CAPACITY];
    int 			lights_length;
    t_texture		texture;
}					t_scene;

static int			scene_intersect_rt(global t_scene *scene, t_intersection *intersection)
{
	int				result;

    result = 0;
    for (int object_i = 0; object_i < scene->objects_length; object_i++)
		result += object_intersect(scene->objects + object_i, intersection);

    return (result != 0);
}

static int			scene_intersect_rm(
					global t_scene *scene,
                    t_intersection *intersection,
                    constant t_cl_renderer_settings *settings)
{
	RT_F			temp_distance;
	RT_F			current_distance;

	intersection->ray.t = 0.;
	intersection->hit = intersection->ray.origin + intersection->ray.direction * 10 * RT_EPSILON;
	for (int step = 0; step < settings->rm_step_limit; step++)
    {
    	current_distance = RT_INFINITY;
    	for (int object_i = 0; object_i < scene->objects_length; object_i++)
		{
			temp_distance = object_sdf(scene->objects + object_i, intersection);
			if (temp_distance < current_distance)
			{
				current_distance = temp_distance;
				intersection->object_id = object_i;
			}
		}
    	if (current_distance < RT_RM_EPSILON)
    		return (1);
    	intersection->ray.t += current_distance;
		intersection->hit += intersection->ray.direction * current_distance * settings->rm_step_part;
    	if (intersection->ray.t > settings->rm_max_distance)
    		return (0);
    }
    return (0);
}

static int			scene_intersect(
					global t_scene *scene,
					global t_camera *camera,
					t_intersection *intersection,
					constant t_cl_renderer_settings *settings)
{
	int				result;

	intersection_reset(intersection);
	if (settings->tracing_mod == rt_tracing_mod_rt)
		result = scene_intersect_rt(scene, intersection);
	else if (settings->tracing_mod == rt_tracing_mod_rm)
    	result = scene_intersect_rm(scene, intersection, settings);
    else
    	return (0);
	if (result)
	{
		if (object_is_pair(scene->objects + intersection->object_id) && scene->objects[intersection->object_id].is_selected)
			intersection->material = (t_material){0, 0};
		else
			intersection->material = scene->objects[intersection->object_id].material;
		if (settings->tracing_mod == rt_tracing_mod_rt)
			intersection->hit = ray_intersect(&intersection->ray);
		if (scene->objects[intersection->object_id].texture_id > -1)
			intersection->material.color = object_texture(&scene->texture, camera, scene->objects + intersection->object_id, intersection);
		if (scene->objects[intersection->object_id].type == object_type_explosion)
			object_explosion_build_material(scene->objects + intersection->object_id, intersection);
		intersection->normal = object_normal(scene->objects + intersection->object_id, intersection, settings);
	}
	return (result);
}