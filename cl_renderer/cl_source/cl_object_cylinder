// cl_object_cylinder /////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_parameters.h"

typedef struct 		    s_object_cylinder
{
	RT_F4   		    top;
	RT_F4   		    bottom;
	RT_F4   		    axis;
	RT_F 			    radius;
}					    t_object_cylinder;

static RT_F             object_cylinder_cap_intersect(global t_object *object, t_intersection *intersection)
{
    t_object_cylinder   data;
    RT_F                t[2];

    data = *(global t_object_cylinder *)object->data;
    if (!dot(intersection->ray.direction, data.axis))
        return (INFINITY);
    t[0] = dot((data.top - intersection->ray.origin), data.axis)
            / dot(intersection->ray.direction, data.axis);
    if (t[0] <= RT_EPSILON)
        return (INFINITY);
    if (length(data.top - (intersection->ray.origin + (intersection->ray.direction * t[0]))) < data.radius)
        intersection->cups_flag = 1;
    else
        t[0] = INFINITY;
    t[1] = dot((data.bottom - intersection->ray.origin), data.axis)
            / dot(intersection->ray.direction, data.axis);
    if (t[1] <= RT_EPSILON)
        return (INFINITY);
    if (length(data.bottom - (intersection->ray.origin + (intersection->ray.direction * t[1]))) < data.radius
        && t[1] < t[0])
        intersection->cups_flag = -1;
    else
        return (t[0]);
    return (t[1]);
}

static int			    object_cylinder_intersect(global t_object *object, t_intersection *intersection)
{
	t_object_cylinder	data;
	RT_F4			    temp[2];
    RT_F			    angle[2];
	RT_F                discriminant;
	RT_F                t[2];
	RT_F                k[3];

	data = *(global t_object_cylinder *)object->data;
	temp[0] = intersection->ray.origin - data.bottom;

	k[0] = dot(intersection->ray.direction, intersection->ray.direction)
			- pow((RT_F)dot(intersection->ray.direction, data.axis), (RT_F)2.);
	k[1] = 2 * (dot(intersection->ray.direction, temp[0])
			- dot(intersection->ray.direction, data.axis)
			* dot(temp[0], data.axis));
	k[2] =  dot(temp[0], temp[0]) - pow((RT_F)dot(temp[0], data.axis), (RT_F)2.)
			- pow((RT_F)data.radius, (RT_F)2.);
	if ((discriminant = k[1] * k[1] - 4 * k[0] * k[2]) < 0.)
		return (0);
	t[0] = (-k[1] - RT_SQRT(discriminant)) / (2 * k[0]);
	if (t[0] <= RT_EPSILON || t[0] >= intersection->ray.t)
		return (0);
    temp[0] = intersection->ray.origin + intersection->ray.direction * t[0];	// p
    angle[0] = dot((temp[0] - data.top), data.axis);
    angle[1] = dot(temp[0] - data.bottom, data.axis);
    t[1] = object_cylinder_cap_intersect(object, intersection);
    if ((angle[0] > 0. || angle[1] < 0.) && t[1] != INFINITY)
        t[0] = t[1];
    else if (!(angle[0] > 0. || angle[1] < 0.))
        intersection->cups_flag = 0;
    else
        return (0);
	intersection->ray.t = t[0];
	intersection->object_id = object->id;
	return (1);
}

static void			    object_cylinder_intersect_t(global t_object *object, t_intersection *intersection, RT_F *t)
{
	t_object_cylinder	data;
	RT_F4			    temp;
    RT_F			    angle[2];
	RT_F                discriminant;
	int             	is_infinity_part[2];
	RT_F                t_cups;
	RT_F                k[3];

	t[0] = RT_INFINITY;
    t[1] = RT_INFINITY;
	data = *(global t_object_cylinder *)object->data;
	temp = intersection->ray.origin - data.bottom;

	k[0] = dot(intersection->ray.direction, intersection->ray.direction)
			- pow((RT_F)dot(intersection->ray.direction, data.axis), (RT_F)2.);
	k[1] = 2 * (dot(intersection->ray.direction, temp)
			- dot(intersection->ray.direction, data.axis)
			* dot(temp, data.axis));
	k[2] =  dot(temp, temp) - pow((RT_F)dot(temp, data.axis), (RT_F)2.)
			- pow((RT_F)data.radius, (RT_F)2.);
	if ((discriminant = k[1] * k[1] - 4 * k[0] * k[2]) < 0.)
        return ;
	t[0] = (-k[1] - RT_SQRT(discriminant)) / (2 * k[0]);
	t[1] = (-k[1] + RT_SQRT(discriminant)) / (2 * k[0]);
	if (t[0] <= RT_EPSILON || t[0] >= intersection->ray.t)
	{
    	if (t[1] <= RT_EPSILON || t[1] >= intersection->ray.t)
    	{
    		t[0] = RT_INFINITY;
        	t[1] = RT_INFINITY;
    		return ;
    	}
    	t[0] = t[1];
    }

    for (int i = 0; i < 2; i++)
    {
    	temp = intersection->ray.origin + intersection->ray.direction * t[i];
    	angle[0] = dot((temp - data.top), data.axis);
        angle[1] = dot(temp - data.bottom, data.axis);
        is_infinity_part[i] = (angle[0] > 0. || angle[1] < 0.);
    }

    t_cups = object_cylinder_cap_intersect(object, intersection);
    if (is_infinity_part[0] && t_cups != INFINITY)
    	t[0] = t_cups;
    else if (is_infinity_part[1] && t_cups != INFINITY)
    	t[1] = t_cups;
    else if (!is_infinity_part[0])
        intersection->cups_flag = 0;
    else
    {
    	t[0] = RT_INFINITY;
        t[1] = RT_INFINITY;
        return ;
    }
}


static RT_F4		    calculate_cylinder_normal(global t_object *object, t_intersection *intersection)
{
    t_object_cylinder   data;
    RT_F4			    temp[2];
    RT_F4               result;

    data = *(global t_object_cylinder *)object->data;
    temp[0] = intersection->ray.origin + intersection->ray.direction * intersection->ray.t;
    temp[1] = temp[0] - data.bottom;
    result = temp[1] - (data.axis * dot(temp[1], data.axis));
    return (normalize(result));
}

static RT_F4		    object_cylinder_normal(global t_object *object, t_intersection *intersection)
{
    if (!intersection->cups_flag)
        return (calculate_cylinder_normal(object, intersection));
    else if (intersection->cups_flag == -1)
        return (normalize(((global t_object_cylinder *)object->data)->axis * -1));
    else
        return (normalize(((global t_object_cylinder *)object->data)->axis));
}
