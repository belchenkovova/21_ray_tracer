// cl_camera ///////////////////////////////////////////////////////////////////////////////////////////////////////////

static void			camera_focus(global t_camera *camera, t_ray *ray, global ulong *rng_state)
{
	RT_F4			focal_point;

	focal_point = camera->position + ray->direction * camera->focal_length;

	ray->origin.x += (.5 - rng(rng_state)) * camera->aperture_size;
	ray->origin.y += (.5 - rng(rng_state)) * camera->aperture_size;
	ray->origin.z += (.5 - rng(rng_state)) * camera->aperture_size;

	ray->direction = normalize(focal_point - ray->origin);
}

static RT_F4		camera_build_vp_point(global t_camera *camera, RT_F x, RT_F y)
{
	RT_F4			up;
	RT_F4			right;

	up = (RT_F4)camera->axis_y * (RT_F)(-1.f * y + (camera->height - 1.f) / 2.f);
	right = (RT_F4)camera->axis_x * (RT_F)(x - (camera->width - 1.f) / 2.f);
	return (up + right + camera->forward);
}

static t_ray		camera_build_ray_raw(global t_camera *camera, RT_F x, RT_F y)
{
	t_ray			result;

	result.origin = camera->position;
    result.direction = normalize(camera_build_vp_point(camera, x, y));
    return (result);
}

static t_ray		camera_build_ray(global t_camera *camera, int2 *screen, global ulong *rng_state)
{
	t_ray			result;
	RT_F 			xf;
	RT_F 			yf;

	xf = (RT_F)screen->x;
	yf = (RT_F)screen->y;
	if (camera->filter_antialiasing)
	{
		filter_jitter(&xf, rng_state);
    	filter_jitter(&yf, rng_state);
	}
	result = camera_build_ray_raw(camera, xf, yf);
	if (camera->focus)
		camera_focus(camera, &result, rng_state);
	return (result);
}

static void			camera_auto_focus(global t_camera *camera, global t_scene *scene, constant t_rt_settings *settings)
{
    t_intersection	intersection;

    intersection.ray = camera_build_ray_raw(camera, camera->request_value.x, camera->request_value.y);
    if (scene_intersect(scene, camera, &intersection, settings))
    	camera->focal_length = intersection.ray.t + object_center_shift(scene->objects + intersection.object_id);
}

static void			camera_select(global t_camera *camera, global t_scene *scene, constant t_rt_settings *settings)
{
    t_intersection	intersection;

	camera->select_request_object = -1;
    intersection.ray = camera_build_ray_raw(camera, camera->request_value.x, camera->request_value.y);

    if (scene_intersect(scene, camera, &intersection, settings))
    	camera->select_request_object = intersection.object_id;
}