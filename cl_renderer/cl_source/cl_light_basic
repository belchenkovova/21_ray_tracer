// cl_light_basic //////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rt_parameters.h"

typedef struct			s_object_light_ambient
{
}						t_object_light_ambient;

typedef struct			s_object_light_point
{
	RT_F4				position;
}						t_object_light_point;

typedef struct			s_object_light_direct
{
	RT_F4				direction;
}						t_object_light_direct;

static RT_F4			static_get_direction(
						t_intersection *intersection,
						constant t_object *object)
{
	if (object->type == object_light_direct)
		return (((constant t_object_light_direct *)object->data)->direction);
	else if (object->type == object_light_point)
		return (((constant t_object_light_point *)object->data)->position - intersection->hit);
	return (0.);
}

static RT_F4			static_get_diffuse_intensity
						(t_intersection *intersection,
						RT_F4 *light_direction)
{
    RT_F	          		dot_value;

	dot_value = dot(*light_direction, intersection->normal);
	if (dot_value > 0.)
		return (dot_value / length(*light_direction));
	return (0.);
}

static RT_F4            static_get_specular_intensity
						(t_intersection *intersection,
						RT_F4 *light_direction)
{
	RT_F4            	halfway;
    RT_F	          	dot_value;

	halfway = normalize(*light_direction + intersection->ray.direction);
	dot_value = dot(halfway, intersection->normal);
	if (dot_value > 0.)
		return (RT_POW(dot_value, RT_CL_LIGHT_BASIC_BLINN));
	return (0.);

}

static int				static_is_shadowed(
						constant t_scene *scene,
						t_intersection *intersection,
						constant t_cl_renderer_settings *settings,
						RT_F4 *light_direction)
{
	t_intersection   	shadow;

	intersection_reset(&shadow);
	shadow.ray.origin = intersection->hit;
	shadow.ray.direction = *light_direction;
	scene_intersect(scene, &shadow, settings);
	return (shadow.ray.t >= RT_EPSILON && shadow.ray.t <= 1.);
}

static RT_F4			light_basic(
						constant t_scene *scene,
						t_intersection *intersection,
						constant t_cl_renderer_settings *settings)
{
	constant t_object	*object;
	RT_F4				color_diffuse;
	RT_F4				color_specular;
	RT_F4				light_direction;

	color_diffuse = 0.;
	color_specular = 0.;
	for (int i = 0; i < scene->lights_length; i++)
	{
		object = scene->objects + scene->lights[i];
		if (object->type == object_light_ambient)
		{
			color_diffuse += object->material.emission;
			continue ;
		}
		light_direction = static_get_direction(intersection, object);
		if (static_is_shadowed(scene, intersection, settings, &light_direction))
			continue ;
		color_diffuse += object->material.emission * static_get_diffuse_intensity(intersection, &light_direction);
		color_specular += static_get_specular_intensity(intersection, &light_direction);
	}
	return (intersection->material.color * color_diffuse + (RT_F4){1., 1., 1., 1.} * intersection->material.specular * color_specular);
}